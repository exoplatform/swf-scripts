name: Create and Publish Docker Image to DockerHub

on:
  workflow_call:
    inputs:
      dockerImage:
        description: Docker Image
        required: true
        type: string
      dockerImageTag:
        description: Docker Image tag (comma separated for multiple)
        default: "latest"
        required: false
        type: string
      dockerFileContext:
        description: Dockerfile Context
        default: "."
        required: false
        type: string
      dockerRegistry:
        description: Docker registry (Default docker.io)
        default: "docker.io"
        required: false
        type: string
      signImage:
        description: Enable Docker Image Signing (DCT)
        type: boolean
        required: false
        default: false
      cosignImage:
        description: Enable Docker Image Signing (Cosign)
        type: boolean
        required: false
        default: false
      cosignOidcImage:
        description: Enable Docker Image Signing (Cosign) with Github OIDC Token (id-token write permission must be provided with cosignImage must be enabled)
        type: boolean
        required: false
        default: false
      attestImage:
        description: Enable Docker Image Attestation by Github (attestations and id-token write permissions must be provided)
        type: boolean
        required: false
        default: false
      attestImageRegistry:
        description: Docker Image Registry for Attestation by Github (default docker.io)
        type: string
        required: false
        default: "docker.io"
    secrets:
      DOCKER_USERNAME:
        description: Docker Registry username
        required: true
      DOCKER_PASSWORD:
        description: Docker Registry user password
        required: true
      DOCKER_PRIVATE_KEY_ID:
        description: Docker Hub Signing Private Key ID
        required: false
      DOCKER_PRIVATE_KEY:
        description: Docker Hub Signing Private Key
        required: false
      DOCKER_PRIVATE_KEY_PASSPHRASE:
        description: Docker Hub Signing Private Key Passphrase
        required: false
      COSIGN_PRIVATE_KEY:
        description: Cosign Signing Private Key
        required: false
      COSIGN_PASSWORD:
        description: Cosign Signing Private Key Passphrase
        required: false

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.additional-jsontags.outputs.tags }}
      digest: ${{ steps.push.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.dockerRegistry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build list of additional tags
        id: additional-tags
        uses: actions/github-script@v7
        with:
          script: |
            core.setOutput('tags', `${{ inputs.dockerImageTag }}`.split(",").join("\n"))     
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}
          tags: |
            ${{ steps.additional-tags.outputs.tags }}
      - name: Build and push Docker image to Registry
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.dockerFileContext }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Build Json array of tags for Docker Signing
        id: additional-jsontags
        run: |
          echo tags=$(echo ${{ inputs.dockerImageTag }} | sed 's/,/\n/g'| jq --raw-input | jq --slurp -c) >> $GITHUB_OUTPUT
  sign-image:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: ${{ inputs.signImage == true }}
    strategy:
      matrix:
        tags: ${{ fromJson(needs.build-and-push-image.outputs.tags) }}
      fail-fast: false
      max-parallel: 1
    steps:
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.dockerRegistry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull image ${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}:${{ matrix.tags }}
        run: docker pull ${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}:${{ matrix.tags }}
      - name: Sign the published Dockerhub Docker image with DCT
        uses: sudo-bot/action-docker-sign@latest
        with:
          image-ref: ${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}:${{ matrix.tags }}
          private-key-id: "${{ secrets.DOCKER_PRIVATE_KEY_ID }}"
          private-key: ${{ secrets.DOCKER_PRIVATE_KEY }}
          private-key-passphrase: ${{ secrets.DOCKER_PRIVATE_KEY_PASSPHRASE }}
  attest-image:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: ${{ inputs.attestImage == true }}
    env:
      digest: ${{ needs.build-and-push-image.outputs.digest }}
    steps:
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.dockerRegistry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull image ${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}@${{ env.digest }}
        run: docker pull ${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}@${{ env.digest }}
      - name: Attest the publised Docker image with Github
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name: ${{ inputs.attestImageRegistry }}/${{ inputs.dockerImage }}
          subject-digest: ${{ env.digest }}
          push-to-registry: true
  cosign-image:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: ${{ inputs.cosignImage == true }}
    env:
      tags: ${{ needs.build-and-push-image.outputs.tags }}
      digest: ${{ needs.build-and-push-image.outputs.digest }}
    steps:
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.dockerRegistry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2
      - name: Sign the published ghcr.io Docker image with Cosign
        run: |
          images=""
          TAGS_LIST="$(echo $TAGS | jq -r '.[]' | xargs -r)"
          for tag in ${TAGS_LIST}; do
            images+="${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}:${tag}@${DIGEST} "
            docker pull ${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}:${tag}@${DIGEST}
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          DIGEST: ${{ env.digest }}
          TAGS: ${{ env.tags }}
      - name: Sign the published ghcr.io Docker image with GitHub OIDC Token
        if: ${{ inputs.cosignOidcImage == true }}
        run: |
            images=""
            TAGS_LIST="$(echo $TAGS | jq -r '.[]' | xargs -r)"
            for tag in ${TAGS_LIST}; do
              images+="${{ inputs.dockerRegistry }}/${{ inputs.dockerImage }}:${tag}@${DIGEST} "
            done
            cosign sign --yes ${images}
        env:
          DIGEST: ${{ env.digest }}
          TAGS: ${{ env.tags }}